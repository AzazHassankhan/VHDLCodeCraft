library IEEE;
use IEEE.Std_logic_1164.all;
use IEEE.Numeric_Std.all;

entity Shift_Register_tb is
end;

architecture bench of Shift_Register_tb is

  component Shift_Register
      Port ( Sin : in STD_LOGIC;
             Clock : in STD_LOGIC;
             Enable : in STD_LOGIC;
             Q0 : out STD_LOGIC;
             Q1 : out STD_LOGIC;
             Q2 : out STD_LOGIC;
             Q3 : out STD_LOGIC
             );
  end component;

  signal Sin: STD_LOGIC;
  signal Clock: STD_LOGIC;
  signal Enable: STD_LOGIC;
  signal Q0: STD_LOGIC;
  signal Q1: STD_LOGIC;
  signal Q2: STD_LOGIC;
  signal Q3: STD_LOGIC ;

  constant clock_period: time := 10 ns;
  signal stop_the_clock: boolean;

begin

  uut: Shift_Register port map ( Sin    => Sin,
                                 Clock  => Clock,
                                 Enable => Enable,
                                 Q0     => Q0,
                                 Q1     => Q1,
                                 Q2     => Q2,
                                 Q3     => Q3 );

  stimulus: process
  begin
  
    -- Put initialisation code here
  enable<='1';
  wait for 10ns;
  Sin<='1';
  wait for 10ns;
  Sin<='1';
  wait for 10ns;
  Sin<='1';
  wait for 10ns;
  Sin<='1';
  wait for 10ns;
  Sin<='1';
  wait for 10ns;
  Sin<='0';
  wait for 10ns;
  Sin<='1';

    -- Put test bench stimulus code here

  end process;

  clocking: process
  begin
    while not stop_the_clock loop
      Clock <= '0', '1' after clock_period / 2;
      wait for clock_period;
    end loop;
    wait;
  end process;

end;