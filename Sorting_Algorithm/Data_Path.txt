library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

-- datapath
entity datapath is
generic (N : integer := 4; L : integer := 4);
port 
( 	
	-- inputs	
	clk : in std_logic;
	rst : in std_logic;
	DataIn : in std_logic_vector(N-1 downto 0); 
	RAdd : in std_logic_vector(L-1 downto 0); 
	s : in std_logic; 
	Wr : in std_logic; 
	WrInit : in std_logic;
	Rd : in std_logic;
	Li : in std_logic;  
	Lj : in std_logic;  
	Ei : in std_logic;  
	Ej : in std_logic;  
	EA : in std_logic;  
	EB : in std_logic;  
	Bout : in std_logic;  
	Csel : in std_logic;  
	-- outputs
	zi : out std_logic; 
	zj : out std_logic;
	AgtB : out std_logic;
	DataOut : out std_logic_vector(N-1 downto 0)
);
end datapath;

architecture arch of datapath is

constant CNTR_i_MAX : std_logic_vector(N-1 downto 0) := x"E";
constant CNTR_j_MAX : std_logic_vector(N-1 downto 0) := x"F";
signal cntr_i_in : std_logic_vector(L-1 downto 0);
signal cntr_j_in : std_logic_vector(L-1 downto 0);
signal i : std_logic_vector(L-1 downto 0); 
signal j : std_logic_vector(L-1 downto 0); 

signal mux0_out : STD_LOGIC_VECTOR (L-1 downto 0);
signal mux1_out : STD_LOGIC_VECTOR (L-1 downto 0); -- Addr

signal we : std_logic;
signal Din : STD_LOGIC_VECTOR (N-1 downto 0);
signal ABMux : STD_LOGIC_VECTOR (N-1 downto 0);
signal ram_out : STD_LOGIC_VECTOR (N-1 downto 0);
signal reg_Aout : STD_LOGIC_VECTOR (N-1 downto 0);
signal reg_Bout : STD_LOGIC_VECTOR (N-1 downto 0);
begin
	
	cntr_i_in <= (others=>'0');
	
	-- counter i
	cntr_i : entity work.countern generic map (N => L)
	port map(clk => clk, rst => rst, ld=> li, en => Ei, input => cntr_i_in, output => i);
	zi <= '1' when (i = CNTR_i_MAX) else '0';
	
	-- counter j
	cntr_j_in <= i + 1;
	cntr_j : entity work.countern generic map (N => L)
	port map(clk => clk, rst => rst, ld => lj, en => Ej, input => cntr_j_in, output => j);
	zj <= '1' when (j = CNTR_j_MAX) else '0';
	
	-- multiplexers
	mux0_out <= j when (Csel = '1') else i;
	mux1_out <= mux0_out when (s = '1') else RAdd;
	Din <= ABMux when (s = '1') else DataIn;
	ABMux <= reg_Bout when (Bout = '1') else reg_Aout;
	
	-- RAM
	we <= WrInit or Wr;
	RAM : entity work.RAM generic map (addr_width => L, data_width => N)
	port map( clk => clk, WE => we, ADDR => mux1_out, DIN => Din, DOUT => ram_out);
		
	-- register
	reg_A : entity work.reg generic map (N => N) port map (clk => clk, rst => rst, en => EA, D => ram_out, Q => reg_Aout); 
	reg_B : entity work.reg generic map (N => N) port map (clk => clk, rst => rst, en => EB, D => ram_out, Q => reg_Bout); 
	
	AgtB <= '1' when (reg_Aout > reg_Bout) else '0';
	DataOut <= ram_out when (Rd = '1') else (others => '0');

end arch;
